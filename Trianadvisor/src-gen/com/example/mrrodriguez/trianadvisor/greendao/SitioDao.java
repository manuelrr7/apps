package com.example.mrrodriguez.trianadvisor.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.mrrodriguez.trianadvisor.greendao.Sitio;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SITIO".
*/
public class SitioDao extends AbstractDao<Sitio, Long> {

    public static final String TABLENAME = "SITIO";

    /**
     * Properties of entity Sitio.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ObjectId = new Property(1, String.class, "objectId", false, "OBJECT_ID");
        public final static Property Nombre = new Property(2, String.class, "nombre", false, "NOMBRE");
        public final static Property Direccion = new Property(3, String.class, "direccion", false, "DIRECCION");
        public final static Property Telefono = new Property(4, String.class, "telefono", false, "TELEFONO");
        public final static Property Descripcion = new Property(5, String.class, "descripcion", false, "DESCRIPCION");
        public final static Property Categoria = new Property(6, String.class, "categoria", false, "CATEGORIA");
        public final static Property Latitud = new Property(7, String.class, "latitud", false, "LATITUD");
        public final static Property Longitud = new Property(8, String.class, "longitud", false, "LONGITUD");
        public final static Property Url_foto = new Property(9, String.class, "url_foto", false, "URL_FOTO");
        public final static Property UpdatedAt = new Property(10, String.class, "updatedAt", false, "UPDATED_AT");
    };


    public SitioDao(DaoConfig config) {
        super(config);
    }
    
    public SitioDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SITIO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"OBJECT_ID\" TEXT," + // 1: objectId
                "\"NOMBRE\" TEXT," + // 2: nombre
                "\"DIRECCION\" TEXT," + // 3: direccion
                "\"TELEFONO\" TEXT," + // 4: telefono
                "\"DESCRIPCION\" TEXT," + // 5: descripcion
                "\"CATEGORIA\" TEXT," + // 6: categoria
                "\"LATITUD\" TEXT," + // 7: latitud
                "\"LONGITUD\" TEXT," + // 8: longitud
                "\"URL_FOTO\" TEXT," + // 9: url_foto
                "\"UPDATED_AT\" TEXT);"); // 10: updatedAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SITIO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Sitio entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(2, objectId);
        }
 
        String nombre = entity.getNombre();
        if (nombre != null) {
            stmt.bindString(3, nombre);
        }
 
        String direccion = entity.getDireccion();
        if (direccion != null) {
            stmt.bindString(4, direccion);
        }
 
        String telefono = entity.getTelefono();
        if (telefono != null) {
            stmt.bindString(5, telefono);
        }
 
        String descripcion = entity.getDescripcion();
        if (descripcion != null) {
            stmt.bindString(6, descripcion);
        }
 
        String categoria = entity.getCategoria();
        if (categoria != null) {
            stmt.bindString(7, categoria);
        }
 
        String latitud = entity.getLatitud();
        if (latitud != null) {
            stmt.bindString(8, latitud);
        }
 
        String longitud = entity.getLongitud();
        if (longitud != null) {
            stmt.bindString(9, longitud);
        }
 
        String url_foto = entity.getUrl_foto();
        if (url_foto != null) {
            stmt.bindString(10, url_foto);
        }
 
        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(11, updatedAt);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Sitio readEntity(Cursor cursor, int offset) {
        Sitio entity = new Sitio( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // objectId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nombre
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // direccion
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // telefono
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // descripcion
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // categoria
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // latitud
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // longitud
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // url_foto
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // updatedAt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Sitio entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setObjectId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNombre(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDireccion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTelefono(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDescripcion(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCategoria(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLatitud(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLongitud(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUrl_foto(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUpdatedAt(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Sitio entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Sitio entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
