package com.example.mrrodriguez.trianadvisor.greendao;

import java.util.List;
import com.example.mrrodriguez.trianadvisor.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "COMENTARIO".
 */
public class Comentario {

    private Long id;
    private String objectId;
    private String cuerpo_comentario;
    private String fecha;
    private String updatedAt;
    private Long usuarioId_c;
    private Long comentarioId_c;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ComentarioDao myDao;

    private Usuario usuario;
    private Long usuario__resolvedKey;

    private Sitio sitio;
    private Long sitio__resolvedKey;

    private List<Comentario> Comentarios_sitio;

    public Comentario() {
    }

    public Comentario(Long id) {
        this.id = id;
    }

    public Comentario(Long id, String objectId, String cuerpo_comentario, String fecha, String updatedAt, Long usuarioId_c, Long comentarioId_c) {
        this.id = id;
        this.objectId = objectId;
        this.cuerpo_comentario = cuerpo_comentario;
        this.fecha = fecha;
        this.updatedAt = updatedAt;
        this.usuarioId_c = usuarioId_c;
        this.comentarioId_c = comentarioId_c;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getComentarioDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getObjectId() {
        return objectId;
    }

    public void setObjectId(String objectId) {
        this.objectId = objectId;
    }

    public String getCuerpo_comentario() {
        return cuerpo_comentario;
    }

    public void setCuerpo_comentario(String cuerpo_comentario) {
        this.cuerpo_comentario = cuerpo_comentario;
    }

    public String getFecha() {
        return fecha;
    }

    public void setFecha(String fecha) {
        this.fecha = fecha;
    }

    public String getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
    }

    public Long getUsuarioId_c() {
        return usuarioId_c;
    }

    public void setUsuarioId_c(Long usuarioId_c) {
        this.usuarioId_c = usuarioId_c;
    }

    public Long getComentarioId_c() {
        return comentarioId_c;
    }

    public void setComentarioId_c(Long comentarioId_c) {
        this.comentarioId_c = comentarioId_c;
    }

    /** To-one relationship, resolved on first access. */
    public Usuario getUsuario() {
        Long __key = this.usuarioId_c;
        if (usuario__resolvedKey == null || !usuario__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UsuarioDao targetDao = daoSession.getUsuarioDao();
            Usuario usuarioNew = targetDao.load(__key);
            synchronized (this) {
                usuario = usuarioNew;
            	usuario__resolvedKey = __key;
            }
        }
        return usuario;
    }

    public void setUsuario(Usuario usuario) {
        synchronized (this) {
            this.usuario = usuario;
            usuarioId_c = usuario == null ? null : usuario.getId();
            usuario__resolvedKey = usuarioId_c;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Sitio getSitio() {
        Long __key = this.comentarioId_c;
        if (sitio__resolvedKey == null || !sitio__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SitioDao targetDao = daoSession.getSitioDao();
            Sitio sitioNew = targetDao.load(__key);
            synchronized (this) {
                sitio = sitioNew;
            	sitio__resolvedKey = __key;
            }
        }
        return sitio;
    }

    public void setSitio(Sitio sitio) {
        synchronized (this) {
            this.sitio = sitio;
            comentarioId_c = sitio == null ? null : sitio.getId();
            sitio__resolvedKey = comentarioId_c;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Comentario> getComentarios_sitio() {
        if (Comentarios_sitio == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ComentarioDao targetDao = daoSession.getComentarioDao();
            List<Comentario> Comentarios_sitioNew = targetDao._queryComentario_Comentarios_sitio(id);
            synchronized (this) {
                if(Comentarios_sitio == null) {
                    Comentarios_sitio = Comentarios_sitioNew;
                }
            }
        }
        return Comentarios_sitio;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetComentarios_sitio() {
        Comentarios_sitio = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
